
void Optimizer::diagnose_non_convergence(void) {
    diagnose_non_convergence(this -> root);
    return;
}
bool Optimizer::diagnose_non_convergence(key_type const & key) {
    if (Configuration::diagnostics == false) { return false; }

    vertex_accessor task;
    if (!State::graph.vertices.find(task, key)) {
        std::cout << "Missing a downward call:" << std::endl;
        std::cout << key.to_string() << std::endl;
        return true;
    }

    if (task -> second.uncertainty() == 0 || task -> second.lowerbound() >= task -> second.upperscope()) { return false; }

    std::cout << "Non-Convergent Task" << std::endl;
    std::cout << task -> second.identifier().to_string() << std::endl;
    std::cout << task -> second.inspect() << std::endl;

    unsigned int reasons = 0;
    bound_accessor bounds;
    State::graph.bounds.find(bounds, task -> second.identifier());
    for (bound_iterator iterator = bounds -> second.begin(); iterator != bounds -> second.end(); ++iterator) {
        int feature = std::get<0>(* iterator);
        bool ready;
        float lower = 0.0, upper = 0.0;
        for (int sign = -1; sign <= 1; sign += 2) {
            vertex_accessor child;
            child_accessor key;
            ready = ready && State::graph.children.find(key, std::make_pair(task -> second.identifier(), sign * (feature + 1)))
                && State::graph.vertices.find(child, key -> second);
            if (ready) {
                lower += child -> second.lowerbound();
                upper += child -> second.upperbound();
            }
        }
        bool missing_signal = false;
        if (ready 
            && (lower != std::get<1>(* iterator) || upper != std::get<2>(* iterator)) 
            && (lower > task -> second.lowerbound() || upper < task -> second.upperbound())) {

            missing_signal = true;
            std::get<1>(* iterator) = lower;
            std::get<2>(* iterator) = upper;
            std::cout << "Missing Signal:" << std::endl;
            // std::cout << "Task: " << task -> second.capture_set().to_string() << std::endl;
            std::cout << "Missing Signal From Feature: " << feature << std::endl;
        }

        float boundary = std::min(task -> second.upperbound(), task -> second.upperscope());
        if (std::get<1>(* iterator) + std::numeric_limits<float>::epsilon() > boundary) { continue; }
        if (std::get<1>(* iterator) == std::get<2>(* iterator)) { continue; }

        if (std::get<1>(* iterator) != task -> second.lowerbound() && std::get<2>(* iterator) != task -> second.upperbound()) { continue; }

        ++reasons;

        std::cout << "Non-Convergent Feature: " << feature << ", Bounds: [" << std::get<1>(* iterator) << ", " << std::get<2>(* iterator) << "]" << std::endl;
        
        {
            vertex_accessor child;
            child_accessor key;
            bool found = false;
            if (State::graph.children.find(key, std::make_pair(task -> second.identifier(), -(feature + 1)))) {
                float uncertainty = 0.0;
                vertex_accessor subtask;
                if (State::graph.vertices.find(subtask, key -> second)) {
                    found  = true;
                    
                    if (task -> second.identifier().to_string{
                    }

                    if (task -> second.identifier().to_string{
                        std::cout << "Missing Child: " << subtask -> second.identifier().to_string() << std::endl; 
                    }

                    std::cout << "Left Bounds: [" << subtask -> second.lowerbound() << ", " << subtask -> second.upperbound() << "], Left Scope: [" << subtask -> second.lowerscope() << ", " << subtask -> second.upperscope() << "]" << std::endl;
                    uncertainty = subtask -> second.uncertainty();
                    subtask.release();
                }

                if (uncertainty > 0.0 && diagnose_non_convergence(key -> second)) { break; }
            }
            if (found == false) { std::cout << "Left Child Not Found." << std::endl; }
        }
        {
            vertex_accessor child;
            child_accessor key;
            bool found = false;
            if (State::graph.children.find(key, std::make_pair(task -> second.identifier(), (feature + 1)))) {
                float uncertainty = 0.0;
                vertex_accessor subtask;
                if (State::graph.vertices.find(subtask, key -> second)) {
                    found  = true;
                    std::cout << "Right Bounds: [" << subtask -> second.lowerbound() << ", " << subtask -> second.upperbound() << "], Right Scope: [" << subtask -> second.lowerscope() << ", " << subtask -> second.upperscope() << "]" << std::endl;
                    uncertainty = subtask -> second.uncertainty();
                    subtask.release();
                }
                if (uncertainty > 0.0 && diagnose_non_convergence(key -> second)) { break; }
            }
            if (found == false) { std::cout << "Right Child Not Found." << std::endl; }
        }
    }

    if (reasons == 0) {
        std::cout << "Missing an upward call:" << std::endl;
        std::cout << task -> second.inspect() << std::endl;
    }
    return true;
}
