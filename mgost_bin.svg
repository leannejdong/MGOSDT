<?xml version="1.0" standalone="no"?>
<!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd">
<svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
<!-- Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples. -->
<!-- NOTES:  -->
<defs>
	<linearGradient id="background" y1="0" y2="1" x1="0" x2="0" >
		<stop stop-color="#eeeeee" offset="5%" />
		<stop stop-color="#eeeeb0" offset="95%" />
	</linearGradient>
</defs>
<style type="text/css">
	text { font-family:Verdana; font-size:12px; fill:rgb(0,0,0); }
	#search, #ignorecase { opacity:0.1; cursor:pointer; }
	#search:hover, #search.show, #ignorecase:hover, #ignorecase.show { opacity:1; }
	#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
	#title { text-anchor:middle; font-size:17px}
	#unzoom { cursor:pointer; }
	#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
	.hide { display:none; }
	.parent { opacity:0.5; }
</style>
<script type="text/ecmascript">
<![CDATA[
	"use strict";
	var details, searchbtn, unzoombtn, matchedtxt, svg, searching, currentSearchTerm, ignorecase, ignorecaseBtn;
	function init(evt) {
		details = document.getElementById("details").firstChild;
		searchbtn = document.getElementById("search");
		ignorecaseBtn = document.getElementById("ignorecase");
		unzoombtn = document.getElementById("unzoom");
		matchedtxt = document.getElementById("matched");
		svg = document.getElementsByTagName("svg")[0];
		searching = 0;
		currentSearchTerm = null;
	}

	window.addEventListener("click", function(e) {
		var target = find_group(e.target);
		if (target) {
			if (target.nodeName == "a") {
				if (e.ctrlKey === false) return;
				e.preventDefault();
			}
			if (target.classList.contains("parent")) unzoom();
			zoom(target);
		}
		else if (e.target.id == "unzoom") unzoom();
		else if (e.target.id == "search") search_prompt();
		else if (e.target.id == "ignorecase") toggle_ignorecase();
	}, false)

	// mouse-over for info
	// show
	window.addEventListener("mouseover", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = "Function: " + g_to_text(target);
	}, false)

	// clear
	window.addEventListener("mouseout", function(e) {
		var target = find_group(e.target);
		if (target) details.nodeValue = ' ';
	}, false)

	// ctrl-F for search
	window.addEventListener("keydown",function (e) {
		if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
			e.preventDefault();
			search_prompt();
		}
	}, false)

	// ctrl-I to toggle case-sensitive search
	window.addEventListener("keydown",function (e) {
		if (e.ctrlKey && e.keyCode === 73) {
			e.preventDefault();
			toggle_ignorecase();
		}
	}, false)

	// functions
	function find_child(node, selector) {
		var children = node.querySelectorAll(selector);
		if (children.length) return children[0];
		return;
	}
	function find_group(node) {
		var parent = node.parentElement;
		if (!parent) return;
		if (parent.id == "frames") return node;
		return find_group(parent);
	}
	function orig_save(e, attr, val) {
		if (e.attributes["_orig_" + attr] != undefined) return;
		if (e.attributes[attr] == undefined) return;
		if (val == undefined) val = e.attributes[attr].value;
		e.setAttribute("_orig_" + attr, val);
	}
	function orig_load(e, attr) {
		if (e.attributes["_orig_"+attr] == undefined) return;
		e.attributes[attr].value = e.attributes["_orig_" + attr].value;
		e.removeAttribute("_orig_"+attr);
	}
	function g_to_text(e) {
		var text = find_child(e, "title").firstChild.nodeValue;
		return (text)
	}
	function g_to_func(e) {
		var func = g_to_text(e);
		// if there's any manipulation we want to do to the function
		// name before it's searched, do it here before returning.
		return (func);
	}
	function update_text(e) {
		var r = find_child(e, "rect");
		var t = find_child(e, "text");
		var w = parseFloat(r.attributes.width.value) -3;
		var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
		t.attributes.x.value = parseFloat(r.attributes.x.value) + 3;

		// Smaller than this size won't fit anything
		if (w < 2 * 12 * 0.59) {
			t.textContent = "";
			return;
		}

		t.textContent = txt;
		// Fit in full text width
		if (/^ *$/.test(txt) || t.getSubStringLength(0, txt.length) < w)
			return;

		for (var x = txt.length - 2; x > 0; x--) {
			if (t.getSubStringLength(0, x + 2) <= w) {
				t.textContent = txt.substring(0, x) + "..";
				return;
			}
		}
		t.textContent = "";
	}

	// zoom
	function zoom_reset(e) {
		if (e.attributes != undefined) {
			orig_load(e, "x");
			orig_load(e, "width");
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_reset(c[i]);
		}
	}
	function zoom_child(e, x, ratio) {
		if (e.attributes != undefined) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = (parseFloat(e.attributes.x.value) - x - 10) * ratio + 10;
				if (e.tagName == "text")
					e.attributes.x.value = find_child(e.parentNode, "rect[x]").attributes.x.value + 3;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseFloat(e.attributes.width.value) * ratio;
			}
		}

		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_child(c[i], x - 10, ratio);
		}
	}
	function zoom_parent(e) {
		if (e.attributes) {
			if (e.attributes.x != undefined) {
				orig_save(e, "x");
				e.attributes.x.value = 10;
			}
			if (e.attributes.width != undefined) {
				orig_save(e, "width");
				e.attributes.width.value = parseInt(svg.width.baseVal.value) - (10 * 2);
			}
		}
		if (e.childNodes == undefined) return;
		for (var i = 0, c = e.childNodes; i < c.length; i++) {
			zoom_parent(c[i]);
		}
	}
	function zoom(node) {
		var attr = find_child(node, "rect").attributes;
		var width = parseFloat(attr.width.value);
		var xmin = parseFloat(attr.x.value);
		var xmax = parseFloat(xmin + width);
		var ymin = parseFloat(attr.y.value);
		var ratio = (svg.width.baseVal.value - 2 * 10) / width;

		// XXX: Workaround for JavaScript float issues (fix me)
		var fudge = 0.0001;

		unzoombtn.classList.remove("hide");

		var el = document.getElementById("frames").children;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var a = find_child(e, "rect").attributes;
			var ex = parseFloat(a.x.value);
			var ew = parseFloat(a.width.value);
			var upstack;
			// Is it an ancestor
			if (0 == 0) {
				upstack = parseFloat(a.y.value) > ymin;
			} else {
				upstack = parseFloat(a.y.value) < ymin;
			}
			if (upstack) {
				// Direct ancestor
				if (ex <= xmin && (ex+ew+fudge) >= xmax) {
					e.classList.add("parent");
					zoom_parent(e);
					update_text(e);
				}
				// not in current path
				else
					e.classList.add("hide");
			}
			// Children maybe
			else {
				// no common path
				if (ex < xmin || ex + fudge >= xmax) {
					e.classList.add("hide");
				}
				else {
					zoom_child(e, xmin, ratio);
					update_text(e);
				}
			}
		}
		search();
	}
	function unzoom() {
		unzoombtn.classList.add("hide");
		var el = document.getElementById("frames").children;
		for(var i = 0; i < el.length; i++) {
			el[i].classList.remove("parent");
			el[i].classList.remove("hide");
			zoom_reset(el[i]);
			update_text(el[i]);
		}
		search();
	}

	// search
	function toggle_ignorecase() {
		ignorecase = !ignorecase;
		if (ignorecase) {
			ignorecaseBtn.classList.add("show");
		} else {
			ignorecaseBtn.classList.remove("show");
		}
		reset_search();
		search();
	}
	function reset_search() {
		var el = document.querySelectorAll("#frames rect");
		for (var i = 0; i < el.length; i++) {
			orig_load(el[i], "fill")
		}
	}
	function search_prompt() {
		if (!searching) {
			var term = prompt("Enter a search term (regexp " +
			    "allowed, eg: ^ext4_)"
			    + (ignorecase ? ", ignoring case" : "")
			    + "\nPress Ctrl-i to toggle case sensitivity", "");
			if (term != null) {
				currentSearchTerm = term;
				search();
			}
		} else {
			reset_search();
			searching = 0;
			currentSearchTerm = null;
			searchbtn.classList.remove("show");
			searchbtn.firstChild.nodeValue = "Search"
			matchedtxt.classList.add("hide");
			matchedtxt.firstChild.nodeValue = ""
		}
	}
	function search(term) {
		if (currentSearchTerm === null) return;
		var term = currentSearchTerm;

		var re = new RegExp(term, ignorecase ? 'i' : '');
		var el = document.getElementById("frames").children;
		var matches = new Object();
		var maxwidth = 0;
		for (var i = 0; i < el.length; i++) {
			var e = el[i];
			var func = g_to_func(e);
			var rect = find_child(e, "rect");
			if (func == null || rect == null)
				continue;

			// Save max width. Only works as we have a root frame
			var w = parseFloat(rect.attributes.width.value);
			if (w > maxwidth)
				maxwidth = w;

			if (func.match(re)) {
				// highlight
				var x = parseFloat(rect.attributes.x.value);
				orig_save(rect, "fill");
				rect.attributes.fill.value = "rgb(230,0,230)";

				// remember matches
				if (matches[x] == undefined) {
					matches[x] = w;
				} else {
					if (w > matches[x]) {
						// overwrite with parent
						matches[x] = w;
					}
				}
				searching = 1;
			}
		}
		if (!searching)
			return;

		searchbtn.classList.add("show");
		searchbtn.firstChild.nodeValue = "Reset Search";

		// calculate percent matched, excluding vertical overlap
		var count = 0;
		var lastx = -1;
		var lastw = 0;
		var keys = Array();
		for (k in matches) {
			if (matches.hasOwnProperty(k))
				keys.push(k);
		}
		// sort the matched frames by their x location
		// ascending, then width descending
		keys.sort(function(a, b){
			return a - b;
		});
		// Step through frames saving only the biggest bottom-up frames
		// thanks to the sort order. This relies on the tree property
		// where children are always smaller than their parents.
		var fudge = 0.0001;	// JavaScript floating point
		for (var k in keys) {
			var x = parseFloat(keys[k]);
			var w = matches[keys[k]];
			if (x >= lastx + lastw - fudge) {
				count += w;
				lastx = x;
				lastw = w;
			}
		}
		// display matched percent
		matchedtxt.classList.remove("hide");
		var pct = 100 * count / maxwidth;
		if (pct != 100) pct = pct.toFixed(1)
		matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
	}
]]>
</script>
<rect x="0.0" y="0" width="1200.0" height="422.0" fill="url(#background)"  />
<text id="title" x="600.00" y="24" >Flame Graph</text>
<text id="details" x="10.00" y="405" > </text>
<text id="unzoom" x="10.00" y="24" class="hide">Reset Zoom</text>
<text id="search" x="1090.00" y="24" >Search</text>
<text id="ignorecase" x="1174.00" y="24" >ic</text>
<text id="matched" x="1090.00" y="405" > </text>
<g id="frames">
<g >
<title>perf_event_pid_type (1 samples, 3.70%)</title><rect x="534.4" y="149" width="43.7" height="15.0" fill="rgb(227,60,22)" rx="2" ry="2" />
<text  x="537.44" y="159.5" >perf..</text>
</g>
<g >
<title>setup_new_exec (1 samples, 3.70%)</title><rect x="534.4" y="229" width="43.7" height="15.0" fill="rgb(221,129,16)" rx="2" ry="2" />
<text  x="537.44" y="239.5" >setu..</text>
</g>
<g >
<title>handle_mm_fault (1 samples, 3.70%)</title><rect x="490.7" y="133" width="43.7" height="15.0" fill="rgb(254,158,33)" rx="2" ry="2" />
<text  x="493.74" y="143.5" >hand..</text>
</g>
<g >
<title>all (27 samples, 100%)</title><rect x="10.0" y="373" width="1180.0" height="15.0" fill="rgb(229,77,9)" rx="2" ry="2" />
<text  x="13.00" y="383.5" ></text>
</g>
<g >
<title>handle_mm_fault (1 samples, 3.70%)</title><rect x="315.9" y="245" width="43.7" height="15.0" fill="rgb(216,124,19)" rx="2" ry="2" />
<text  x="318.93" y="255.5" >hand..</text>
</g>
<g >
<title>__handle_mm_fault (1 samples, 3.70%)</title><rect x="490.7" y="117" width="43.7" height="15.0" fill="rgb(211,0,7)" rx="2" ry="2" />
<text  x="493.74" y="127.5" >__ha..</text>
</g>
<g >
<title>__x64_sys_execve (6 samples, 22.22%)</title><rect x="927.8" y="293" width="262.2" height="15.0" fill="rgb(214,142,13)" rx="2" ry="2" />
<text  x="930.78" y="303.5" >__x64_sys_execve</text>
</g>
<g >
<title>perf_iterate_sb (1 samples, 3.70%)</title><rect x="534.4" y="181" width="43.7" height="15.0" fill="rgb(244,85,40)" rx="2" ry="2" />
<text  x="537.44" y="191.5" >perf..</text>
</g>
<g >
<title>native_write_msr (6 samples, 22.22%)</title><rect x="53.7" y="197" width="262.2" height="15.0" fill="rgb(232,195,29)" rx="2" ry="2" />
<text  x="56.70" y="207.5" >native_write_msr</text>
</g>
<g >
<title>__gmpn_ior_n (1 samples, 3.70%)</title><rect x="315.9" y="325" width="43.7" height="15.0" fill="rgb(244,196,6)" rx="2" ry="2" />
<text  x="318.93" y="335.5" >__gm..</text>
</g>
<g >
<title>gosdt (21 samples, 77.78%)</title><rect x="10.0" y="357" width="917.8" height="15.0" fill="rgb(248,28,41)" rx="2" ry="2" />
<text  x="13.00" y="367.5" >gosdt</text>
</g>
<g >
<title>do_fault (1 samples, 3.70%)</title><rect x="447.0" y="181" width="43.7" height="15.0" fill="rgb(209,148,42)" rx="2" ry="2" />
<text  x="450.04" y="191.5" >do_f..</text>
</g>
<g >
<title>ext4_lookup (1 samples, 3.70%)</title><rect x="709.3" y="181" width="43.7" height="15.0" fill="rgb(238,146,8)" rx="2" ry="2" />
<text  x="712.26" y="191.5" >ext4..</text>
</g>
<g >
<title>perf_iterate_ctx (1 samples, 3.70%)</title><rect x="534.4" y="165" width="43.7" height="15.0" fill="rgb(233,162,25)" rx="2" ry="2" />
<text  x="537.44" y="175.5" >perf..</text>
</g>
<g >
<title>read_pages (1 samples, 3.70%)</title><rect x="447.0" y="69" width="43.7" height="15.0" fill="rgb(234,107,21)" rx="2" ry="2" />
<text  x="450.04" y="79.5" >read..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 3.70%)</title><rect x="578.1" y="325" width="43.8" height="15.0" fill="rgb(223,156,20)" rx="2" ry="2" />
<text  x="581.15" y="335.5" >entr..</text>
</g>
<g >
<title>handle_mm_fault (1 samples, 3.70%)</title><rect x="753.0" y="245" width="43.7" height="15.0" fill="rgb(243,89,34)" rx="2" ry="2" />
<text  x="755.96" y="255.5" >hand..</text>
</g>
<g >
<title>page_fault (1 samples, 3.70%)</title><rect x="490.7" y="197" width="43.7" height="15.0" fill="rgb(229,200,20)" rx="2" ry="2" />
<text  x="493.74" y="207.5" >page..</text>
</g>
<g >
<title>exit_to_usermode_loop (1 samples, 3.70%)</title><rect x="578.1" y="293" width="43.8" height="15.0" fill="rgb(232,69,39)" rx="2" ry="2" />
<text  x="581.15" y="303.5" >exit..</text>
</g>
<g >
<title>ext4_release_file (1 samples, 3.70%)</title><rect x="578.1" y="229" width="43.8" height="15.0" fill="rgb(207,151,40)" rx="2" ry="2" />
<text  x="581.15" y="239.5" >ext4..</text>
</g>
<g >
<title>__do_page_cache_readahead (1 samples, 3.70%)</title><rect x="447.0" y="85" width="43.7" height="15.0" fill="rgb(213,216,49)" rx="2" ry="2" />
<text  x="450.04" y="95.5" >__do..</text>
</g>
<g >
<title>__x64_sys_execve (2 samples, 7.41%)</title><rect x="490.7" y="293" width="87.4" height="15.0" fill="rgb(234,191,48)" rx="2" ry="2" />
<text  x="493.74" y="303.5" >__x64_sys_..</text>
</g>
<g >
<title>load_elf_binary (2 samples, 7.41%)</title><rect x="490.7" y="245" width="87.4" height="15.0" fill="rgb(231,212,12)" rx="2" ry="2" />
<text  x="493.74" y="255.5" >load_elf_b..</text>
</g>
<g >
<title>std::vector&lt;bool, std::allocator&lt;bool&gt; &gt;::_M_fill_insert (1 samples, 3.70%)</title><rect x="840.4" y="341" width="43.7" height="15.0" fill="rgb(212,47,34)" rx="2" ry="2" />
<text  x="843.37" y="351.5" >std:..</text>
</g>
<g >
<title>[unknown] (1 samples, 3.70%)</title><rect x="10.0" y="325" width="43.7" height="15.0" fill="rgb(222,182,26)" rx="2" ry="2" />
<text  x="13.00" y="335.5" >[unk..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (1 samples, 3.70%)</title><rect x="709.3" y="309" width="43.7" height="15.0" fill="rgb(231,45,0)" rx="2" ry="2" />
<text  x="712.26" y="319.5" >entr..</text>
</g>
<g >
<title>_dl_relocate_object (2 samples, 7.41%)</title><rect x="403.3" y="293" width="87.4" height="15.0" fill="rgb(227,106,0)" rx="2" ry="2" />
<text  x="406.33" y="303.5" >_dl_reloca..</text>
</g>
<g >
<title>schedule_tail (6 samples, 22.22%)</title><rect x="53.7" y="293" width="262.2" height="15.0" fill="rgb(207,154,35)" rx="2" ry="2" />
<text  x="56.70" y="303.5" >schedule_tail</text>
</g>
<g >
<title>alloc_inode (1 samples, 3.70%)</title><rect x="709.3" y="133" width="43.7" height="15.0" fill="rgb(221,72,50)" rx="2" ry="2" />
<text  x="712.26" y="143.5" >allo..</text>
</g>
<g >
<title>do_user_addr_fault (1 samples, 3.70%)</title><rect x="490.7" y="149" width="43.7" height="15.0" fill="rgb(245,8,40)" rx="2" ry="2" />
<text  x="493.74" y="159.5" >do_u..</text>
</g>
<g >
<title>__do_page_fault (1 samples, 3.70%)</title><rect x="490.7" y="165" width="43.7" height="15.0" fill="rgb(210,159,4)" rx="2" ry="2" />
<text  x="493.74" y="175.5" >__do..</text>
</g>
<g >
<title>handle_mm_fault (1 samples, 3.70%)</title><rect x="447.0" y="213" width="43.7" height="15.0" fill="rgb(208,228,41)" rx="2" ry="2" />
<text  x="450.04" y="223.5" >hand..</text>
</g>
<g >
<title>search_binary_handler (2 samples, 7.41%)</title><rect x="490.7" y="261" width="87.4" height="15.0" fill="rgb(212,197,18)" rx="2" ry="2" />
<text  x="493.74" y="271.5" >search_bin..</text>
</g>
<g >
<title>do_fault (1 samples, 3.70%)</title><rect x="315.9" y="213" width="43.7" height="15.0" fill="rgb(248,133,14)" rx="2" ry="2" />
<text  x="318.93" y="223.5" >do_f..</text>
</g>
<g >
<title>kmem_cache_alloc (1 samples, 3.70%)</title><rect x="709.3" y="101" width="43.7" height="15.0" fill="rgb(218,171,19)" rx="2" ry="2" />
<text  x="712.26" y="111.5" >kmem..</text>
</g>
<g >
<title>__handle_mm_fault (1 samples, 3.70%)</title><rect x="447.0" y="197" width="43.7" height="15.0" fill="rgb(239,140,40)" rx="2" ry="2" />
<text  x="450.04" y="207.5" >__ha..</text>
</g>
<g >
<title>__perf_event_task_sched_in (6 samples, 22.22%)</title><rect x="53.7" y="261" width="262.2" height="15.0" fill="rgb(253,142,22)" rx="2" ry="2" />
<text  x="56.70" y="271.5" >__perf_event_task_sched_in</text>
</g>
<g >
<title>do_filp_open (1 samples, 3.70%)</title><rect x="709.3" y="245" width="43.7" height="15.0" fill="rgb(216,93,12)" rx="2" ry="2" />
<text  x="712.26" y="255.5" >do_f..</text>
</g>
<g >
<title>__set_task_comm (1 samples, 3.70%)</title><rect x="534.4" y="213" width="43.7" height="15.0" fill="rgb(215,60,22)" rx="2" ry="2" />
<text  x="537.44" y="223.5" >__se..</text>
</g>
<g >
<title>intel_tfa_pmu_enable_all (6 samples, 22.22%)</title><rect x="53.7" y="213" width="262.2" height="15.0" fill="rgb(228,175,10)" rx="2" ry="2" />
<text  x="56.70" y="223.5" >intel_tfa_pmu_enable_all</text>
</g>
<g >
<title>memset (1 samples, 3.70%)</title><rect x="753.0" y="325" width="43.7" height="15.0" fill="rgb(238,1,47)" rx="2" ry="2" />
<text  x="755.96" y="335.5" >memset</text>
</g>
<g >
<title>__do_execve_file.isra.0 (2 samples, 7.41%)</title><rect x="490.7" y="277" width="87.4" height="15.0" fill="rgb(234,59,53)" rx="2" ry="2" />
<text  x="493.74" y="287.5" >__do_execv..</text>
</g>
<g >
<title>perf_pmu_enable.part.0 (6 samples, 22.22%)</title><rect x="927.8" y="181" width="262.2" height="15.0" fill="rgb(226,156,6)" rx="2" ry="2" />
<text  x="930.78" y="191.5" >perf_pmu_enable.part.0</text>
</g>
<g >
<title>[unknown] (6 samples, 22.22%)</title><rect x="927.8" y="341" width="262.2" height="15.0" fill="rgb(210,94,31)" rx="2" ry="2" />
<text  x="930.78" y="351.5" >[unknown]</text>
</g>
<g >
<title>setup_new_exec (6 samples, 22.22%)</title><rect x="927.8" y="229" width="262.2" height="15.0" fill="rgb(225,11,21)" rx="2" ry="2" />
<text  x="930.78" y="239.5" >setup_new_exec</text>
</g>
<g >
<title>do_syscall_64 (1 samples, 3.70%)</title><rect x="578.1" y="309" width="43.8" height="15.0" fill="rgb(238,224,17)" rx="2" ry="2" />
<text  x="581.15" y="319.5" >do_s..</text>
</g>
<g >
<title>do_user_addr_fault (1 samples, 3.70%)</title><rect x="315.9" y="261" width="43.7" height="15.0" fill="rgb(222,224,7)" rx="2" ry="2" />
<text  x="318.93" y="271.5" >do_u..</text>
</g>
<g >
<title>__do_page_fault (1 samples, 3.70%)</title><rect x="447.0" y="245" width="43.7" height="15.0" fill="rgb(223,12,4)" rx="2" ry="2" />
<text  x="450.04" y="255.5" >__do..</text>
</g>
<g >
<title>__x64_sys_openat (1 samples, 3.70%)</title><rect x="709.3" y="277" width="43.7" height="15.0" fill="rgb(222,153,37)" rx="2" ry="2" />
<text  x="712.26" y="287.5" >__x6..</text>
</g>
<g >
<title>alloc_set_pte (1 samples, 3.70%)</title><rect x="315.9" y="181" width="43.7" height="15.0" fill="rgb(221,207,48)" rx="2" ry="2" />
<text  x="318.93" y="191.5" >allo..</text>
</g>
<g >
<title>do_syscall_64 (6 samples, 22.22%)</title><rect x="927.8" y="309" width="262.2" height="15.0" fill="rgb(226,104,16)" rx="2" ry="2" />
<text  x="930.78" y="319.5" >do_syscall_64</text>
</g>
<g >
<title>page_fault (1 samples, 3.70%)</title><rect x="315.9" y="309" width="43.7" height="15.0" fill="rgb(205,90,53)" rx="2" ry="2" />
<text  x="318.93" y="319.5" >page..</text>
</g>
<g >
<title>do_user_addr_fault (1 samples, 3.70%)</title><rect x="753.0" y="261" width="43.7" height="15.0" fill="rgb(206,165,18)" rx="2" ry="2" />
<text  x="755.96" y="271.5" >do_u..</text>
</g>
<g >
<title>lookup_open (1 samples, 3.70%)</title><rect x="709.3" y="197" width="43.7" height="15.0" fill="rgb(206,198,10)" rx="2" ry="2" />
<text  x="712.26" y="207.5" >look..</text>
</g>
<g >
<title>__handle_mm_fault (1 samples, 3.70%)</title><rect x="753.0" y="229" width="43.7" height="15.0" fill="rgb(213,191,10)" rx="2" ry="2" />
<text  x="755.96" y="239.5" >__ha..</text>
</g>
<g >
<title>memcg_kmem_get_cache (1 samples, 3.70%)</title><rect x="709.3" y="85" width="43.7" height="15.0" fill="rgb(240,54,46)" rx="2" ry="2" />
<text  x="712.26" y="95.5" >memc..</text>
</g>
<g >
<title>perf_pmu_enable.part.0 (6 samples, 22.22%)</title><rect x="53.7" y="245" width="262.2" height="15.0" fill="rgb(208,5,47)" rx="2" ry="2" />
<text  x="56.70" y="255.5" >perf_pmu_enable.part.0</text>
</g>
<g >
<title>std::vector&lt;Bitmask, std::allocator&lt;Bitmask&gt; &gt;::_M_fill_insert (1 samples, 3.70%)</title><rect x="10.0" y="309" width="43.7" height="15.0" fill="rgb(214,176,50)" rx="2" ry="2" />
<text  x="13.00" y="319.5" >std:..</text>
</g>
<g >
<title>_dl_map_object (2 samples, 7.41%)</title><rect x="709.3" y="341" width="87.4" height="15.0" fill="rgb(223,21,30)" rx="2" ry="2" />
<text  x="712.26" y="351.5" >_dl_map_ob..</text>
</g>
<g >
<title>clear_user (1 samples, 3.70%)</title><rect x="490.7" y="229" width="43.7" height="15.0" fill="rgb(219,52,5)" rx="2" ry="2" />
<text  x="493.74" y="239.5" >clea..</text>
</g>
<g >
<title>__do_page_fault (1 samples, 3.70%)</title><rect x="753.0" y="277" width="43.7" height="15.0" fill="rgb(219,30,19)" rx="2" ry="2" />
<text  x="755.96" y="287.5" >__do..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (6 samples, 22.22%)</title><rect x="927.8" y="325" width="262.2" height="15.0" fill="rgb(252,125,22)" rx="2" ry="2" />
<text  x="930.78" y="335.5" >entry_SYSCALL_64_after_hwframe</text>
</g>
<g >
<title>__clone (6 samples, 22.22%)</title><rect x="53.7" y="325" width="262.2" height="15.0" fill="rgb(216,131,1)" rx="2" ry="2" />
<text  x="56.70" y="335.5" >__clone</text>
</g>
<g >
<title>ext4_readpages (1 samples, 3.70%)</title><rect x="447.0" y="53" width="43.7" height="15.0" fill="rgb(218,85,45)" rx="2" ry="2" />
<text  x="450.04" y="63.5" >ext4..</text>
</g>
<g >
<title>__ext4_iget (1 samples, 3.70%)</title><rect x="709.3" y="165" width="43.7" height="15.0" fill="rgb(223,108,2)" rx="2" ry="2" />
<text  x="712.26" y="175.5" >__ex..</text>
</g>
<g >
<title>perf_event_comm (1 samples, 3.70%)</title><rect x="534.4" y="197" width="43.7" height="15.0" fill="rgb(222,210,10)" rx="2" ry="2" />
<text  x="537.44" y="207.5" >perf..</text>
</g>
<g >
<title>search_binary_handler (6 samples, 22.22%)</title><rect x="927.8" y="261" width="262.2" height="15.0" fill="rgb(252,66,50)" rx="2" ry="2" />
<text  x="930.78" y="271.5" >search_binary_handler</text>
</g>
<g >
<title>dl_main (3 samples, 11.11%)</title><rect x="359.6" y="309" width="131.1" height="15.0" fill="rgb(243,10,23)" rx="2" ry="2" />
<text  x="362.63" y="319.5" >dl_main</text>
</g>
<g >
<title>_dl_fixup (1 samples, 3.70%)</title><rect x="665.6" y="341" width="43.7" height="15.0" fill="rgb(217,77,28)" rx="2" ry="2" />
<text  x="668.56" y="351.5" >_dl_..</text>
</g>
<g >
<title>ext4_filemap_fault (1 samples, 3.70%)</title><rect x="447.0" y="149" width="43.7" height="15.0" fill="rgb(238,184,54)" rx="2" ry="2" />
<text  x="450.04" y="159.5" >ext4..</text>
</g>
<g >
<title>__fput (1 samples, 3.70%)</title><rect x="578.1" y="245" width="43.8" height="15.0" fill="rgb(228,170,19)" rx="2" ry="2" />
<text  x="581.15" y="255.5" >__fput</text>
</g>
<g >
<title>path_openat (1 samples, 3.70%)</title><rect x="709.3" y="229" width="43.7" height="15.0" fill="rgb(211,106,51)" rx="2" ry="2" />
<text  x="712.26" y="239.5" >path..</text>
</g>
<g >
<title>__do_page_fault (1 samples, 3.70%)</title><rect x="315.9" y="277" width="43.7" height="15.0" fill="rgb(231,74,16)" rx="2" ry="2" />
<text  x="318.93" y="287.5" >__do..</text>
</g>
<g >
<title>task_work_run (1 samples, 3.70%)</title><rect x="578.1" y="277" width="43.8" height="15.0" fill="rgb(252,21,46)" rx="2" ry="2" />
<text  x="581.15" y="287.5" >task..</text>
</g>
<g >
<title>page_fault (1 samples, 3.70%)</title><rect x="753.0" y="309" width="43.7" height="15.0" fill="rgb(216,59,31)" rx="2" ry="2" />
<text  x="755.96" y="319.5" >page..</text>
</g>
<g >
<title>do_page_fault (1 samples, 3.70%)</title><rect x="447.0" y="261" width="43.7" height="15.0" fill="rgb(213,96,11)" rx="2" ry="2" />
<text  x="450.04" y="271.5" >do_p..</text>
</g>
<g >
<title>native_write_msr (6 samples, 22.22%)</title><rect x="927.8" y="133" width="262.2" height="15.0" fill="rgb(213,149,45)" rx="2" ry="2" />
<text  x="930.78" y="143.5" >native_write_msr</text>
</g>
<g >
<title>__close_nocancel (1 samples, 3.70%)</title><rect x="578.1" y="341" width="43.8" height="15.0" fill="rgb(226,127,2)" rx="2" ry="2" />
<text  x="581.15" y="351.5" >__cl..</text>
</g>
<g >
<title>_dl_addr (1 samples, 3.70%)</title><rect x="621.9" y="341" width="43.7" height="15.0" fill="rgb(234,104,8)" rx="2" ry="2" />
<text  x="624.85" y="351.5" >_dl_..</text>
</g>
<g >
<title>load_elf_binary (6 samples, 22.22%)</title><rect x="927.8" y="245" width="262.2" height="15.0" fill="rgb(209,77,2)" rx="2" ry="2" />
<text  x="930.78" y="255.5" >load_elf_binary</text>
</g>
<g >
<title>__handle_mm_fault (1 samples, 3.70%)</title><rect x="315.9" y="229" width="43.7" height="15.0" fill="rgb(253,93,34)" rx="2" ry="2" />
<text  x="318.93" y="239.5" >__ha..</text>
</g>
<g >
<title>__GI___open64_nocancel (1 samples, 3.70%)</title><rect x="709.3" y="325" width="43.7" height="15.0" fill="rgb(216,9,27)" rx="2" ry="2" />
<text  x="712.26" y="335.5" >__GI..</text>
</g>
<g >
<title>ext4_mpage_readpages (1 samples, 3.70%)</title><rect x="447.0" y="37" width="43.7" height="15.0" fill="rgb(210,115,41)" rx="2" ry="2" />
<text  x="450.04" y="47.5" >ext4..</text>
</g>
<g >
<title>std::basic_ios&lt;char, std::char_traits&lt;char&gt; &gt;::clear (1 samples, 3.70%)</title><rect x="796.7" y="341" width="43.7" height="15.0" fill="rgb(209,161,28)" rx="2" ry="2" />
<text  x="799.67" y="351.5" >std:..</text>
</g>
<g >
<title>filemap_map_pages (1 samples, 3.70%)</title><rect x="315.9" y="197" width="43.7" height="15.0" fill="rgb(206,133,0)" rx="2" ry="2" />
<text  x="318.93" y="207.5" >file..</text>
</g>
<g >
<title>do_sys_open (1 samples, 3.70%)</title><rect x="709.3" y="261" width="43.7" height="15.0" fill="rgb(227,211,46)" rx="2" ry="2" />
<text  x="712.26" y="271.5" >do_s..</text>
</g>
<g >
<title>ondemand_readahead (1 samples, 3.70%)</title><rect x="447.0" y="101" width="43.7" height="15.0" fill="rgb(205,71,54)" rx="2" ry="2" />
<text  x="450.04" y="111.5" >onde..</text>
</g>
<g >
<title>_dl_sysdep_start (3 samples, 11.11%)</title><rect x="359.6" y="325" width="131.1" height="15.0" fill="rgb(207,147,4)" rx="2" ry="2" />
<text  x="362.63" y="335.5" >_dl_sysdep_start</text>
</g>
<g >
<title>[unknown] (13 samples, 48.15%)</title><rect x="10.0" y="341" width="568.1" height="15.0" fill="rgb(241,171,16)" rx="2" ry="2" />
<text  x="13.00" y="351.5" >[unknown]</text>
</g>
<g >
<title>perf (6 samples, 22.22%)</title><rect x="927.8" y="357" width="262.2" height="15.0" fill="rgb(253,2,3)" rx="2" ry="2" />
<text  x="930.78" y="367.5" >perf</text>
</g>
<g >
<title>alloc_pages_vma (1 samples, 3.70%)</title><rect x="490.7" y="85" width="43.7" height="15.0" fill="rgb(238,228,19)" rx="2" ry="2" />
<text  x="493.74" y="95.5" >allo..</text>
</g>
<g >
<title>ctx_resched (6 samples, 22.22%)</title><rect x="927.8" y="197" width="262.2" height="15.0" fill="rgb(212,217,8)" rx="2" ry="2" />
<text  x="930.78" y="207.5" >ctx_resched</text>
</g>
<g >
<title>do_syscall_64 (1 samples, 3.70%)</title><rect x="709.3" y="293" width="43.7" height="15.0" fill="rgb(230,203,30)" rx="2" ry="2" />
<text  x="712.26" y="303.5" >do_s..</text>
</g>
<g >
<title>tbb::spin_rw_mutex_v3::internal_try_acquire_writer (1 samples, 3.70%)</title><rect x="884.1" y="341" width="43.7" height="15.0" fill="rgb(215,194,35)" rx="2" ry="2" />
<text  x="887.07" y="351.5" >tbb:..</text>
</g>
<g >
<title>__clear_user (1 samples, 3.70%)</title><rect x="490.7" y="213" width="43.7" height="15.0" fill="rgb(221,11,39)" rx="2" ry="2" />
<text  x="493.74" y="223.5" >__cl..</text>
</g>
<g >
<title>do_page_fault (1 samples, 3.70%)</title><rect x="490.7" y="181" width="43.7" height="15.0" fill="rgb(233,212,2)" rx="2" ry="2" />
<text  x="493.74" y="191.5" >do_p..</text>
</g>
<g >
<title>x86_pmu_enable (6 samples, 22.22%)</title><rect x="53.7" y="229" width="262.2" height="15.0" fill="rgb(229,27,27)" rx="2" ry="2" />
<text  x="56.70" y="239.5" >x86_pmu_enable</text>
</g>
<g >
<title>do_fault (1 samples, 3.70%)</title><rect x="490.7" y="101" width="43.7" height="15.0" fill="rgb(237,173,1)" rx="2" ry="2" />
<text  x="493.74" y="111.5" >do_f..</text>
</g>
<g >
<title>__do_fault (1 samples, 3.70%)</title><rect x="447.0" y="165" width="43.7" height="15.0" fill="rgb(213,163,23)" rx="2" ry="2" />
<text  x="450.04" y="175.5" >__do..</text>
</g>
<g >
<title>do_page_fault (1 samples, 3.70%)</title><rect x="753.0" y="293" width="43.7" height="15.0" fill="rgb(238,50,49)" rx="2" ry="2" />
<text  x="755.96" y="303.5" >do_p..</text>
</g>
<g >
<title>perf_event_exec (6 samples, 22.22%)</title><rect x="927.8" y="213" width="262.2" height="15.0" fill="rgb(254,17,1)" rx="2" ry="2" />
<text  x="930.78" y="223.5" >perf_event_exec</text>
</g>
<g >
<title>intel_tfa_pmu_enable_all (6 samples, 22.22%)</title><rect x="927.8" y="149" width="262.2" height="15.0" fill="rgb(242,184,35)" rx="2" ry="2" />
<text  x="930.78" y="159.5" >intel_tfa_pmu_enable_all</text>
</g>
<g >
<title>do_page_fault (1 samples, 3.70%)</title><rect x="315.9" y="293" width="43.7" height="15.0" fill="rgb(250,52,5)" rx="2" ry="2" />
<text  x="318.93" y="303.5" >do_p..</text>
</g>
<g >
<title>do_last (1 samples, 3.70%)</title><rect x="709.3" y="213" width="43.7" height="15.0" fill="rgb(206,131,50)" rx="2" ry="2" />
<text  x="712.26" y="223.5" >do_l..</text>
</g>
<g >
<title>__do_execve_file.isra.0 (6 samples, 22.22%)</title><rect x="927.8" y="277" width="262.2" height="15.0" fill="rgb(248,63,46)" rx="2" ry="2" />
<text  x="930.78" y="287.5" >__do_execve_file.isra.0</text>
</g>
<g >
<title>page_cache_async_readahead (1 samples, 3.70%)</title><rect x="447.0" y="117" width="43.7" height="15.0" fill="rgb(212,53,25)" rx="2" ry="2" />
<text  x="450.04" y="127.5" >page..</text>
</g>
<g >
<title>ext4_alloc_inode (1 samples, 3.70%)</title><rect x="709.3" y="117" width="43.7" height="15.0" fill="rgb(207,14,30)" rx="2" ry="2" />
<text  x="712.26" y="127.5" >ext4..</text>
</g>
<g >
<title>_dl_lookup_symbol_x (1 samples, 3.70%)</title><rect x="359.6" y="293" width="43.7" height="15.0" fill="rgb(234,96,50)" rx="2" ry="2" />
<text  x="362.63" y="303.5" >_dl_..</text>
</g>
<g >
<title>finish_task_switch (6 samples, 22.22%)</title><rect x="53.7" y="277" width="262.2" height="15.0" fill="rgb(229,71,36)" rx="2" ry="2" />
<text  x="56.70" y="287.5" >finish_task_switch</text>
</g>
<g >
<title>iget_locked (1 samples, 3.70%)</title><rect x="709.3" y="149" width="43.7" height="15.0" fill="rgb(215,78,27)" rx="2" ry="2" />
<text  x="712.26" y="159.5" >iget..</text>
</g>
<g >
<title>do_syscall_64 (2 samples, 7.41%)</title><rect x="490.7" y="309" width="87.4" height="15.0" fill="rgb(216,33,18)" rx="2" ry="2" />
<text  x="493.74" y="319.5" >do_syscall..</text>
</g>
<g >
<title>____fput (1 samples, 3.70%)</title><rect x="578.1" y="261" width="43.8" height="15.0" fill="rgb(217,141,53)" rx="2" ry="2" />
<text  x="581.15" y="271.5" >____..</text>
</g>
<g >
<title>page_fault (1 samples, 3.70%)</title><rect x="447.0" y="277" width="43.7" height="15.0" fill="rgb(237,137,33)" rx="2" ry="2" />
<text  x="450.04" y="287.5" >page..</text>
</g>
<g >
<title>x86_pmu_enable (6 samples, 22.22%)</title><rect x="927.8" y="165" width="262.2" height="15.0" fill="rgb(252,37,30)" rx="2" ry="2" />
<text  x="930.78" y="175.5" >x86_pmu_enable</text>
</g>
<g >
<title>ret_from_fork (6 samples, 22.22%)</title><rect x="53.7" y="309" width="262.2" height="15.0" fill="rgb(245,2,44)" rx="2" ry="2" />
<text  x="56.70" y="319.5" >ret_from_fork</text>
</g>
<g >
<title>do_user_addr_fault (1 samples, 3.70%)</title><rect x="447.0" y="229" width="43.7" height="15.0" fill="rgb(205,10,1)" rx="2" ry="2" />
<text  x="450.04" y="239.5" >do_u..</text>
</g>
<g >
<title>filemap_fault (1 samples, 3.70%)</title><rect x="447.0" y="133" width="43.7" height="15.0" fill="rgb(205,106,7)" rx="2" ry="2" />
<text  x="450.04" y="143.5" >file..</text>
</g>
<g >
<title>entry_SYSCALL_64_after_hwframe (2 samples, 7.41%)</title><rect x="490.7" y="325" width="87.4" height="15.0" fill="rgb(236,151,46)" rx="2" ry="2" />
<text  x="493.74" y="335.5" >entry_SYSC..</text>
</g>
</g>
</svg>
